{"version":3,"file":"tracespace-identify-layers.umd.cjs","sources":["../src/get-common-cad.ts","../src/constants.ts","../src/layer-types.ts","../src/matchers.ts","../src/get-matches.ts","../src/index.ts"],"sourcesContent":["import type {LayerTestMatch, GerberCad} from './types'\n\nexport function getCommonCad(matches: LayerTestMatch[]): GerberCad {\n  let mode: GerberCad = null\n  let modeCount = 0\n  const countsByCad: Partial<Record<string, number>> = {}\n\n  for (const match of matches) {\n    const {cad} = match\n    if (cad !== null) {\n      const count = (countsByCad[cad] ?? 0) + 1\n      if (count > modeCount) {\n        modeCount = count\n        mode = cad\n      }\n\n      countsByCad[cad] = count\n    }\n  }\n\n  return mode\n}\n","// Layer types\nexport const TYPE_COPPER = 'copper'\nexport const TYPE_SOLDERMASK = 'soldermask'\nexport const TYPE_SILKSCREEN = 'silkscreen'\nexport const TYPE_SOLDERPASTE = 'solderpaste'\nexport const TYPE_DRILL = 'drill'\nexport const TYPE_OUTLINE = 'outline'\nexport const TYPE_DRAWING = 'drawing'\n\n// Board sides\nexport const SIDE_TOP = 'top'\nexport const SIDE_BOTTOM = 'bottom'\nexport const SIDE_INNER = 'inner'\nexport const SIDE_ALL = 'all'\n\n// Cad packages\n// internal use only, for now\nexport const CAD_KICAD = 'kicad'\nexport const CAD_ALTIUM = 'altium'\nexport const CAD_ALLEGRO = 'allegro'\nexport const CAD_EAGLE = 'eagle'\nexport const CAD_EAGLE_LEGACY = 'eagle-legacy'\nexport const CAD_EAGLE_OSHPARK = 'eagle-oshpark'\nexport const CAD_EAGLE_PCBNG = 'eagle-pcbng'\nexport const CAD_GEDA_PCB = 'geda-pcb'\nexport const CAD_ORCAD = 'orcad'\nexport const CAD_DIPTRACE = 'diptrace'\n","import {\n  TYPE_COPPER,\n  TYPE_SOLDERMASK,\n  TYPE_SILKSCREEN,\n  TYPE_SOLDERPASTE,\n  TYPE_DRILL,\n  TYPE_OUTLINE,\n  TYPE_DRAWING,\n  SIDE_TOP,\n  SIDE_BOTTOM,\n  SIDE_INNER,\n  SIDE_ALL,\n  CAD_KICAD,\n  CAD_ALTIUM,\n  CAD_ALLEGRO,\n  CAD_EAGLE,\n  CAD_EAGLE_LEGACY,\n  CAD_EAGLE_OSHPARK,\n  CAD_EAGLE_PCBNG,\n  CAD_GEDA_PCB,\n  CAD_ORCAD,\n  CAD_DIPTRACE,\n} from './constants'\n\nimport type {LayerType} from './types'\n\nexport const layerTypes: LayerType[] = [\n  // High-priority non-matches\n  {\n    type: null,\n    side: null,\n    matchers: [\n      // Eagle gerber generation metadata\n      {\n        ext: 'gpi',\n        cad: [CAD_EAGLE, CAD_EAGLE_LEGACY, CAD_EAGLE_OSHPARK, CAD_EAGLE_PCBNG],\n      },\n      // Eagle drill generation metadata\n      {\n        ext: 'dri',\n        cad: [CAD_EAGLE, CAD_EAGLE_LEGACY, CAD_EAGLE_OSHPARK, CAD_EAGLE_PCBNG],\n      },\n      // General data/BOM files\n      {ext: 'csv', cad: null},\n      // Pick-n-place BOMs\n      {match: /pnp_bom/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_COPPER,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'cmp', cad: CAD_EAGLE_LEGACY},\n      {ext: 'top', cad: [CAD_EAGLE_LEGACY, CAD_ORCAD]},\n      {ext: 'gtl', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'toplayer\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /top\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]cu/, cad: CAD_KICAD},\n      {match: /copper_top/, cad: CAD_EAGLE},\n      {match: /top_copper/, cad: CAD_EAGLE_PCBNG},\n      {match: /top copper/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERMASK,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'stc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'tsm', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gts', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'smt', cad: CAD_ORCAD},\n      {ext: 'topsoldermask\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /topmask\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]mask/, cad: CAD_KICAD},\n      {match: /soldermask_top/, cad: CAD_EAGLE},\n      {match: /top_mask/, cad: CAD_EAGLE_PCBNG},\n      {match: /top solder resist/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SILKSCREEN,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'plc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'tsk', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gto', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'sst', cad: CAD_ORCAD},\n      {ext: 'topsilkscreen\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /topsilk\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]silks/, cad: CAD_KICAD},\n      {match: /silkscreen_top/, cad: CAD_EAGLE},\n      {match: /top_silk/, cad: CAD_EAGLE_PCBNG},\n      {match: /top silk screen/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERPASTE,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'crc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'tsp', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gtp', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'spt', cad: CAD_ORCAD},\n      {ext: 'tcream\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /toppaste\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]paste/, cad: CAD_KICAD},\n      {match: /solderpaste_top/, cad: CAD_EAGLE},\n      {match: /top_paste/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_COPPER,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'sol', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bot', cad: [CAD_EAGLE_LEGACY, CAD_ORCAD]},\n      {ext: 'gbl', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'bottomlayer\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottom\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]cu/, cad: CAD_KICAD},\n      {match: /copper_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_copper/, cad: CAD_EAGLE_PCBNG},\n      {match: /bottom copper/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERMASK,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'sts', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bsm', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gbs', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'smb', cad: CAD_ORCAD},\n      {ext: 'bottomsoldermask\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottommask\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]mask/, cad: CAD_KICAD},\n      {match: /soldermask_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_mask/, cad: CAD_EAGLE_PCBNG},\n      {match: /bottom solder resist/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SILKSCREEN,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'pls', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bsk', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gbo', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'ssb', cad: CAD_ORCAD},\n      {ext: 'bottomsilkscreen\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottomsilk\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]silks/, cad: CAD_KICAD},\n      {match: /silkscreen_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_silk/, cad: CAD_EAGLE_PCBNG},\n      {match: /bottom silk screen/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERPASTE,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'crs', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bsp', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gbp', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'spb', cad: CAD_ORCAD},\n      {ext: 'bcream\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottompaste\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]paste/, cad: CAD_KICAD},\n      {match: /solderpaste_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_paste/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_COPPER,\n    side: SIDE_INNER,\n    matchers: [\n      {ext: 'ly\\\\d+', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gp?\\\\d+', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'in\\\\d+', cad: CAD_ORCAD},\n      {ext: 'internalplane\\\\d+\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /in(?:ner)?\\d+[._]cu/, cad: CAD_KICAD},\n      {match: /inner/, cad: CAD_DIPTRACE},\n    ],\n  },\n  {\n    type: TYPE_OUTLINE,\n    side: SIDE_ALL,\n    matchers: [\n      {ext: 'dim', cad: CAD_EAGLE_LEGACY},\n      {ext: 'mil', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gml', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gm\\\\d+', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'gko', cad: CAD_ALTIUM},\n      {ext: 'fab', cad: CAD_ORCAD},\n      {ext: 'drd', cad: CAD_ORCAD},\n      {match: /outline/, cad: [CAD_GEDA_PCB, CAD_EAGLE_PCBNG]},\n      {match: /boardoutline/, cad: [CAD_EAGLE_OSHPARK, CAD_DIPTRACE]},\n      {match: /edge[._]cuts/, cad: CAD_KICAD},\n      {match: /profile/, cad: CAD_EAGLE},\n      {match: /mechanical \\d+/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_DRILL,\n    side: SIDE_ALL,\n    matchers: [\n      {ext: 'txt', cad: [CAD_EAGLE_LEGACY, CAD_ALTIUM]},\n      {\n        ext: 'xln',\n        cad: [CAD_EAGLE, CAD_EAGLE_LEGACY, CAD_EAGLE_OSHPARK],\n      },\n      {ext: 'exc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'drd', cad: CAD_EAGLE_LEGACY},\n      {ext: 'drl', cad: [CAD_KICAD, CAD_DIPTRACE]},\n      {ext: 'tap', cad: CAD_ORCAD},\n      {ext: 'npt', cad: CAD_ORCAD},\n      {ext: 'plated-drill\\\\.cnc', cad: CAD_GEDA_PCB},\n      {match: /fab/, cad: CAD_GEDA_PCB},\n      {match: /npth/, cad: CAD_KICAD},\n      {match: /drill/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_DRAWING,\n    side: null,\n    matchers: [\n      {ext: 'pos', cad: CAD_KICAD},\n      {ext: 'art', cad: CAD_ALLEGRO},\n      {ext: 'gbr', cad: null},\n      {ext: 'gbx', cad: null},\n      {ext: 'ger', cad: null},\n      {ext: 'pho', cad: null},\n    ],\n  },\n]\n","import {layerTypes} from './layer-types'\nimport type {LayerTest} from './types'\n\nexport const matchers: LayerTest[] = layerTypes.flatMap(layer => {\n  return layer.matchers.flatMap(matcher => {\n    const cadList = Array.isArray(matcher.cad) ? matcher.cad : [matcher.cad]\n    const match =\n      'ext' in matcher\n        ? new RegExp('\\\\.' + matcher.ext + '$', 'i')\n        : new RegExp(matcher.match, 'i')\n\n    return cadList.map(cad => ({\n      type: layer.type,\n      side: layer.side,\n      match,\n      cad,\n    }))\n  })\n})\n","import {matchers} from './matchers'\nimport type {LayerTestMatch} from './types'\n\nexport function getMatches(filename: string): LayerTestMatch[] {\n  return matchers\n    .map(m => (m.match.test(filename) ? {...m, filename} : null))\n    .filter((m: LayerTestMatch | null): m is LayerTestMatch => m !== null)\n}\n","import {getCommonCad} from './get-common-cad'\nimport {getMatches} from './get-matches'\nimport {layerTypes} from './layer-types'\n\nimport type {\n  LayerIdentityMap,\n  ValidLayer,\n  ValidatedLayer,\n  LayerIdentity,\n  LayerTestMatch,\n  GerberType,\n  GerberSide,\n  GerberCad,\n} from './types'\n\nexport * from './constants'\nexport * from './types'\n\nexport function identifyLayers(filenames: string | string[]): LayerIdentityMap {\n  if (typeof filenames === 'string') filenames = [filenames]\n\n  const matches = filenames.flatMap(f => getMatches(f))\n  const commonCad = getCommonCad(matches)\n\n  return Object.fromEntries(\n    filenames.map(filename => {\n      const match = _selectMatch(matches, filename, commonCad)\n      const layerId = match\n        ? {type: match.type, side: match.side}\n        : {type: null, side: null}\n\n      return [filename, layerId]\n    })\n  )\n}\n\nexport function getAllLayers(): ValidLayer[] {\n  return layerTypes\n    .map(layer => ({type: layer.type, side: layer.side}))\n    .filter((layer): layer is ValidLayer => layer.type !== null)\n}\n\nexport function validate<T extends {side: string | null; type: string | null}>(\n  target: T\n): ValidatedLayer {\n  const valid = layerTypes.some(layer => {\n    return layer.side === target.side && layer.type === target.type\n  })\n\n  const validSide = layerTypes.some(layer => layer.side === target.side)\n  const validType = layerTypes.some(layer => layer.type === target.type)\n\n  return {\n    valid,\n    side: validSide ? (target.side as GerberSide) : null,\n    type: validType ? (target.type as GerberType) : null,\n  }\n}\n\nfunction _selectMatch(\n  matches: LayerTestMatch[],\n  filename: string,\n  cad: GerberCad\n): LayerIdentity | null {\n  const filenameMatches = matches.filter(match => match.filename === filename)\n  const result = filenameMatches.find(match => match.cad === cad)\n\n  return result ?? filenameMatches[0] ?? null\n}\n"],"names":["getCommonCad","matches","mode","modeCount","countsByCad","match","cad","count","TYPE_COPPER","TYPE_SOLDERMASK","TYPE_SILKSCREEN","TYPE_SOLDERPASTE","TYPE_DRILL","TYPE_OUTLINE","TYPE_DRAWING","SIDE_TOP","SIDE_BOTTOM","SIDE_INNER","SIDE_ALL","CAD_KICAD","CAD_ALTIUM","CAD_ALLEGRO","CAD_EAGLE","CAD_EAGLE_LEGACY","CAD_EAGLE_OSHPARK","CAD_EAGLE_PCBNG","CAD_GEDA_PCB","CAD_ORCAD","CAD_DIPTRACE","layerTypes","matchers","layer","matcher","cadList","getMatches","filename","m","identifyLayers","filenames","f","commonCad","_selectMatch","layerId","getAllLayers","validate","target","valid","validSide","validType","filenameMatches"],"mappings":"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"}
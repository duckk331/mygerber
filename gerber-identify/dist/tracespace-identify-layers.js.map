{"version":3,"file":"tracespace-identify-layers.js","sources":["../src/get-common-cad.ts","../src/constants.ts","../src/layer-types.ts","../src/matchers.ts","../src/get-matches.ts","../src/index.ts"],"sourcesContent":["import type {LayerTestMatch, GerberCad} from './types'\n\nexport function getCommonCad(matches: LayerTestMatch[]): GerberCad {\n  let mode: GerberCad = null\n  let modeCount = 0\n  const countsByCad: Partial<Record<string, number>> = {}\n\n  for (const match of matches) {\n    const {cad} = match\n    if (cad !== null) {\n      const count = (countsByCad[cad] ?? 0) + 1\n      if (count > modeCount) {\n        modeCount = count\n        mode = cad\n      }\n\n      countsByCad[cad] = count\n    }\n  }\n\n  return mode\n}\n","// Layer types\nexport const TYPE_COPPER = 'copper'\nexport const TYPE_SOLDERMASK = 'soldermask'\nexport const TYPE_SILKSCREEN = 'silkscreen'\nexport const TYPE_SOLDERPASTE = 'solderpaste'\nexport const TYPE_DRILL = 'drill'\nexport const TYPE_OUTLINE = 'outline'\nexport const TYPE_DRAWING = 'drawing'\n\n// Board sides\nexport const SIDE_TOP = 'top'\nexport const SIDE_BOTTOM = 'bottom'\nexport const SIDE_INNER = 'inner'\nexport const SIDE_ALL = 'all'\n\n// Cad packages\n// internal use only, for now\nexport const CAD_KICAD = 'kicad'\nexport const CAD_ALTIUM = 'altium'\nexport const CAD_ALLEGRO = 'allegro'\nexport const CAD_EAGLE = 'eagle'\nexport const CAD_EAGLE_LEGACY = 'eagle-legacy'\nexport const CAD_EAGLE_OSHPARK = 'eagle-oshpark'\nexport const CAD_EAGLE_PCBNG = 'eagle-pcbng'\nexport const CAD_GEDA_PCB = 'geda-pcb'\nexport const CAD_ORCAD = 'orcad'\nexport const CAD_DIPTRACE = 'diptrace'\n","import {\n  TYPE_COPPER,\n  TYPE_SOLDERMASK,\n  TYPE_SILKSCREEN,\n  TYPE_SOLDERPASTE,\n  TYPE_DRILL,\n  TYPE_OUTLINE,\n  TYPE_DRAWING,\n  SIDE_TOP,\n  SIDE_BOTTOM,\n  SIDE_INNER,\n  SIDE_ALL,\n  CAD_KICAD,\n  CAD_ALTIUM,\n  CAD_ALLEGRO,\n  CAD_EAGLE,\n  CAD_EAGLE_LEGACY,\n  CAD_EAGLE_OSHPARK,\n  CAD_EAGLE_PCBNG,\n  CAD_GEDA_PCB,\n  CAD_ORCAD,\n  CAD_DIPTRACE,\n} from './constants'\n\nimport type {LayerType} from './types'\n\nexport const layerTypes: LayerType[] = [\n  // High-priority non-matches\n  {\n    type: null,\n    side: null,\n    matchers: [\n      // Eagle gerber generation metadata\n      {\n        ext: 'gpi',\n        cad: [CAD_EAGLE, CAD_EAGLE_LEGACY, CAD_EAGLE_OSHPARK, CAD_EAGLE_PCBNG],\n      },\n      // Eagle drill generation metadata\n      {\n        ext: 'dri',\n        cad: [CAD_EAGLE, CAD_EAGLE_LEGACY, CAD_EAGLE_OSHPARK, CAD_EAGLE_PCBNG],\n      },\n      // General data/BOM files\n      {ext: 'csv', cad: null},\n      // Pick-n-place BOMs\n      {match: /pnp_bom/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_COPPER,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'cmp', cad: CAD_EAGLE_LEGACY},\n      {ext: 'top', cad: [CAD_EAGLE_LEGACY, CAD_ORCAD]},\n      {ext: 'gtl', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'toplayer\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /top\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]cu/, cad: CAD_KICAD},\n      {match: /copper_top/, cad: CAD_EAGLE},\n      {match: /top_copper/, cad: CAD_EAGLE_PCBNG},\n      {match: /top copper/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERMASK,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'stc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'tsm', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gts', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'smt', cad: CAD_ORCAD},\n      {ext: 'topsoldermask\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /topmask\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]mask/, cad: CAD_KICAD},\n      {match: /soldermask_top/, cad: CAD_EAGLE},\n      {match: /top_mask/, cad: CAD_EAGLE_PCBNG},\n      {match: /top solder resist/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SILKSCREEN,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'plc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'tsk', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gto', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'sst', cad: CAD_ORCAD},\n      {ext: 'topsilkscreen\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /topsilk\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]silks/, cad: CAD_KICAD},\n      {match: /silkscreen_top/, cad: CAD_EAGLE},\n      {match: /top_silk/, cad: CAD_EAGLE_PCBNG},\n      {match: /top silk screen/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERPASTE,\n    side: SIDE_TOP,\n    matchers: [\n      {ext: 'crc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'tsp', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gtp', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'spt', cad: CAD_ORCAD},\n      {ext: 'tcream\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /toppaste\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /f[._]paste/, cad: CAD_KICAD},\n      {match: /solderpaste_top/, cad: CAD_EAGLE},\n      {match: /top_paste/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_COPPER,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'sol', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bot', cad: [CAD_EAGLE_LEGACY, CAD_ORCAD]},\n      {ext: 'gbl', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'bottomlayer\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottom\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]cu/, cad: CAD_KICAD},\n      {match: /copper_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_copper/, cad: CAD_EAGLE_PCBNG},\n      {match: /bottom copper/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERMASK,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'sts', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bsm', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gbs', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'smb', cad: CAD_ORCAD},\n      {ext: 'bottomsoldermask\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottommask\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]mask/, cad: CAD_KICAD},\n      {match: /soldermask_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_mask/, cad: CAD_EAGLE_PCBNG},\n      {match: /bottom solder resist/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SILKSCREEN,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'pls', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bsk', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gbo', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'ssb', cad: CAD_ORCAD},\n      {ext: 'bottomsilkscreen\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottomsilk\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]silks/, cad: CAD_KICAD},\n      {match: /silkscreen_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_silk/, cad: CAD_EAGLE_PCBNG},\n      {match: /bottom silk screen/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_SOLDERPASTE,\n    side: SIDE_BOTTOM,\n    matchers: [\n      {ext: 'crs', cad: CAD_EAGLE_LEGACY},\n      {ext: 'bsp', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gbp', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'spb', cad: CAD_ORCAD},\n      {ext: 'bcream\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /bottompaste\\.\\w+$/, cad: [CAD_GEDA_PCB, CAD_DIPTRACE]},\n      {match: /b[._]paste/, cad: CAD_KICAD},\n      {match: /solderpaste_bottom/, cad: CAD_EAGLE},\n      {match: /bottom_paste/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_COPPER,\n    side: SIDE_INNER,\n    matchers: [\n      {ext: 'ly\\\\d+', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gp?\\\\d+', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'in\\\\d+', cad: CAD_ORCAD},\n      {ext: 'internalplane\\\\d+\\\\.ger', cad: CAD_EAGLE_OSHPARK},\n      {match: /in(?:ner)?\\d+[._]cu/, cad: CAD_KICAD},\n      {match: /inner/, cad: CAD_DIPTRACE},\n    ],\n  },\n  {\n    type: TYPE_OUTLINE,\n    side: SIDE_ALL,\n    matchers: [\n      {ext: 'dim', cad: CAD_EAGLE_LEGACY},\n      {ext: 'mil', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gml', cad: CAD_EAGLE_LEGACY},\n      {ext: 'gm\\\\d+', cad: [CAD_KICAD, CAD_ALTIUM]},\n      {ext: 'gko', cad: CAD_ALTIUM},\n      {ext: 'fab', cad: CAD_ORCAD},\n      {ext: 'drd', cad: CAD_ORCAD},\n      {match: /outline/, cad: [CAD_GEDA_PCB, CAD_EAGLE_PCBNG]},\n      {match: /boardoutline/, cad: [CAD_EAGLE_OSHPARK, CAD_DIPTRACE]},\n      {match: /edge[._]cuts/, cad: CAD_KICAD},\n      {match: /profile/, cad: CAD_EAGLE},\n      {match: /mechanical \\d+/, cad: null},\n    ],\n  },\n  {\n    type: TYPE_DRILL,\n    side: SIDE_ALL,\n    matchers: [\n      {ext: 'txt', cad: [CAD_EAGLE_LEGACY, CAD_ALTIUM]},\n      {\n        ext: 'xln',\n        cad: [CAD_EAGLE, CAD_EAGLE_LEGACY, CAD_EAGLE_OSHPARK],\n      },\n      {ext: 'exc', cad: CAD_EAGLE_LEGACY},\n      {ext: 'drd', cad: CAD_EAGLE_LEGACY},\n      {ext: 'drl', cad: [CAD_KICAD, CAD_DIPTRACE]},\n      {ext: 'tap', cad: CAD_ORCAD},\n      {ext: 'npt', cad: CAD_ORCAD},\n      {ext: 'plated-drill\\\\.cnc', cad: CAD_GEDA_PCB},\n      {match: /fab/, cad: CAD_GEDA_PCB},\n      {match: /npth/, cad: CAD_KICAD},\n      {match: /drill/, cad: CAD_EAGLE_PCBNG},\n    ],\n  },\n  {\n    type: TYPE_DRAWING,\n    side: null,\n    matchers: [\n      {ext: 'pos', cad: CAD_KICAD},\n      {ext: 'art', cad: CAD_ALLEGRO},\n      {ext: 'gbr', cad: null},\n      {ext: 'gbx', cad: null},\n      {ext: 'ger', cad: null},\n      {ext: 'pho', cad: null},\n    ],\n  },\n]\n","import {layerTypes} from './layer-types'\nimport type {LayerTest} from './types'\n\nexport const matchers: LayerTest[] = layerTypes.flatMap(layer => {\n  return layer.matchers.flatMap(matcher => {\n    const cadList = Array.isArray(matcher.cad) ? matcher.cad : [matcher.cad]\n    const match =\n      'ext' in matcher\n        ? new RegExp('\\\\.' + matcher.ext + '$', 'i')\n        : new RegExp(matcher.match, 'i')\n\n    return cadList.map(cad => ({\n      type: layer.type,\n      side: layer.side,\n      match,\n      cad,\n    }))\n  })\n})\n","import {matchers} from './matchers'\nimport type {LayerTestMatch} from './types'\n\nexport function getMatches(filename: string): LayerTestMatch[] {\n  return matchers\n    .map(m => (m.match.test(filename) ? {...m, filename} : null))\n    .filter((m: LayerTestMatch | null): m is LayerTestMatch => m !== null)\n}\n","import {getCommonCad} from './get-common-cad'\nimport {getMatches} from './get-matches'\nimport {layerTypes} from './layer-types'\n\nimport type {\n  LayerIdentityMap,\n  ValidLayer,\n  ValidatedLayer,\n  LayerIdentity,\n  LayerTestMatch,\n  GerberType,\n  GerberSide,\n  GerberCad,\n} from './types'\n\nexport * from './constants'\nexport * from './types'\n\nexport function identifyLayers(filenames: string | string[]): LayerIdentityMap {\n  if (typeof filenames === 'string') filenames = [filenames]\n\n  const matches = filenames.flatMap(f => getMatches(f))\n  const commonCad = getCommonCad(matches)\n\n  return Object.fromEntries(\n    filenames.map(filename => {\n      const match = _selectMatch(matches, filename, commonCad)\n      const layerId = match\n        ? {type: match.type, side: match.side}\n        : {type: null, side: null}\n\n      return [filename, layerId]\n    })\n  )\n}\n\nexport function getAllLayers(): ValidLayer[] {\n  return layerTypes\n    .map(layer => ({type: layer.type, side: layer.side}))\n    .filter((layer): layer is ValidLayer => layer.type !== null)\n}\n\nexport function validate<T extends {side: string | null; type: string | null}>(\n  target: T\n): ValidatedLayer {\n  const valid = layerTypes.some(layer => {\n    return layer.side === target.side && layer.type === target.type\n  })\n\n  const validSide = layerTypes.some(layer => layer.side === target.side)\n  const validType = layerTypes.some(layer => layer.type === target.type)\n\n  return {\n    valid,\n    side: validSide ? (target.side as GerberSide) : null,\n    type: validType ? (target.type as GerberType) : null,\n  }\n}\n\nfunction _selectMatch(\n  matches: LayerTestMatch[],\n  filename: string,\n  cad: GerberCad\n): LayerIdentity | null {\n  const filenameMatches = matches.filter(match => match.filename === filename)\n  const result = filenameMatches.find(match => match.cad === cad)\n\n  return result ?? filenameMatches[0] ?? null\n}\n"],"names":["getCommonCad","matches","mode","modeCount","countsByCad","match","cad","count","TYPE_COPPER","TYPE_SOLDERMASK","TYPE_SILKSCREEN","TYPE_SOLDERPASTE","TYPE_DRILL","TYPE_OUTLINE","TYPE_DRAWING","SIDE_TOP","SIDE_BOTTOM","SIDE_INNER","SIDE_ALL","CAD_KICAD","CAD_ALTIUM","CAD_ALLEGRO","CAD_EAGLE","CAD_EAGLE_LEGACY","CAD_EAGLE_OSHPARK","CAD_EAGLE_PCBNG","CAD_GEDA_PCB","CAD_ORCAD","CAD_DIPTRACE","layerTypes","matchers","layer","matcher","cadList","getMatches","filename","m","identifyLayers","filenames","f","commonCad","_selectMatch","layerId","getAllLayers","validate","target","valid","validSide","validType","filenameMatches"],"mappings":"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"}